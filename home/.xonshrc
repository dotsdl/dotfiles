import warnings
warnings.filterwarnings('ignore')

#$PROMPT = '{branch_color}{curr_branch:{} }{RESET}[{#5CCEF4}{cwd_base}{RESET}] ! '
$PROMPT = '{branch_color}{curr_branch:{} }{RESET}[{#ff1c5a}{cwd_base}{RESET}] ! '
$PROMPT = '{vte_new_tab_cwd}' + $PROMPT
$PROMPT = '{env_name:{}}' + $PROMPT
$HOSTNAME = 'vita'

$MULTILINE_PROMPT = ''

#$PL_PROMPT = '!' 
#$PL_TOOLBAR = 'who>virtualenv>branch>cwd>full_proc'
#$PL_TOOLBAR = '!'  # for no toolbar

# xontribs
xontrib load vox
#xontrib load mpl
xontrib load jedi
#xontrib load bashisms
xontrib load coreutils
#xontrib load xonda
#xontrib load vox_tabcomplete
xontrib load z
#xontrib load powerline


# some customization options
aliases['exec'] = aliases['xexec']
aliases['ls'] = 'exa'
aliases['tree'] = 'exa --tree --level=5'
#aliases['l'] = 'ls -CF'
#aliases['ll'] = 'ls -alF'
#aliases['la'] = 'ls -A'
#aliases['l'] = 'ls -CF'
aliases['lh'] = 'ls -lh'
aliases['archey3'] = 'archey3 -c red'

$XONSH_SHOW_TRACEBACK = True
$XONSH_STORE_STDOUT = True

$VI_MODE = True
$EDITOR = "nvim"

$TERM="xterm-256color"
#$XONSH_COLOR_STYLE = "rrt"
$XONSH_COLOR_STYLE = "monokai"

# local bin
$PATH.insert(0, '/home/david/.local/bin')
#$PATH.append('/home/david/node_modules/.bin')
#$PATH.append('/home/david/Scripts/')

#$SHELL_TYPE='readline'
# prompt_toolkit options
$COMPLETIONS_CONFIRM=True
$AUTO_SUGGEST=False
$FUZZY_PATH_COMPLETION=True
$SUBSEQUENCE_PATH_COMPLETION=True
$COMPLETIONS_DISPLAY="single"
$XONSH_HISTORY_BACKEND = 'sqlite'

# see https://github.com/xonsh/xonsh/issues/4383
#$UPDATE_OS_ENVIRON = True

# LS COLORS
#$LS_COLORS['di'] = ('#5CCEF4',)
$LS_COLORS['di'] = ('#ff1c5a',)
$LS_COLORS['ln'] = ('BOLD_YELLOW',)


_items = list($LS_COLORS.items())
for key, value in _items:
    _nval = tuple(color if not color == "BOLD_PURPLE" else "INTENSE_PURPLE" for color in value)
    $LS_COLORS[key] = _nval
            

# aliases
# aliases['source'](['/home/david/.xonsh_aliases'])

# python modules
#from datreant import *

#bash -c "xset r rate 200 30"

# rust
#$PATH.append('/home/david/.cargo/bin')

for i in ('glances', 'yaourt', 'tig', 'nvim', 'yay', 'git'):
    __xonsh__.commands_cache.threadable_predictors[i] = lambda args: False

# node
$PATH.append('./node_modules/.bin')


#def miniconda(): $PATH.insert(0, "/opt/miniconda3/bin")

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!

def mambaforge():
   import sys as _sys
   from types import ModuleType as _ModuleType
   _mod = _ModuleType("xontrib.conda",
                      "Autogenerated from $(/opt/mambaforge/bin/conda shell.xonsh hook)")
   __xonsh__.execer.exec($("/opt/mambaforge/bin/conda" "shell.xonsh" "hook"),
                         glbs=_mod.__dict__,
                         filename="$(/opt/mambaforge/bin/conda shell.xonsh hook)")
   _sys.modules["xontrib.conda"] = _mod
   del _sys, _mod, _ModuleType
# <<< conda initialize <<<

source ~/.xonsh_aliases

# for pycharm to work
$_JAVA_AWT_WM_NONREPARENTING=1
